# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules =
    [ "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ "amdgpu" ];

  environment.variables = { ROC_ENABLE_PRE_VEGA = "1"; };
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/d60638da-35b9-4793-9bb5-db1ee4781f95";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/50DB-70A8";
    fsType = "vfat";
    options = [ "fmask=0077" "dmask=0077" ];
  };

  # Mount the second hard drive to /mnt/storage
  fileSystems."/mnt/storage" = {
    # Replace with your actual device path (e.g., /dev/sdb1, /dev/nvme1n1p1, etc.)
    device = "/dev/disk/by-uuid/d5d21bfb-758b-494c-8633-f6f067ed90e2";

    # Specify the filesystem type (ext4, ntfs, xfs, btrfs, etc.)
    fsType = "ext4";

    # Mount options
    options = [
      "defaults"
      "nofail" # Don't fail boot if drive is missing
      "user" # Allow users to mount/unmount
      "exec" # Allow execution of binaries
    ];
  };

  swapDevices =
    [{ device = "/dev/disk/by-uuid/67d4c2c8-0067-4dd9-800f-8e6b3beef1b3"; }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
}
